{"ast":null,"code":"var _jsxFileName = \"/Users/leogao/Downloads/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = .5\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  // () => if num > chanceLightStartsOn isLit  is False     \n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        // row.push(Math.random() < chanceLightStartsOn)\n        row.push(false);\n        console.log(\"made a false thing\");\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => cell === false));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-won\",\n      children: \"You won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this);\n  }\n\n  // TODO\n\n  // make table board\n\n  // TODO\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((isLit, x) => /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: isLit,\n          flipCellsAroundMe: () => flipCellsAround(`${y}-${x}`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","push","console","log","hasWon","every","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["/Users/leogao/Downloads/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = .5}) {\n  const [board, setBoard] = useState(createBoard());\n\n  \n    // () => if num > chanceLightStartsOn isLit  is False     \n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let i = 0; i< nrows; i++){\n      let row = []\n      for(let j = 0; j<ncols; j++){\n        // row.push(Math.random() < chanceLightStartsOn)\n        row.push(false)\n        console.log(\"made a false thing\")\n      }\n      initialBoard.push(row)\n    }\n\n    \n\n    \n    return initialBoard;\n  }\n  \n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => cell === false));\n\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n     let boardCopy = oldBoard.map(row => [...row])\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y,x,boardCopy)\n      flipCell(y-1,x,boardCopy)\n      flipCell(y+1,x,boardCopy)\n      flipCell(y,x-1,boardCopy)\n      flipCell(y,x+1,boardCopy)\n      // TODO: return the copy\n      return boardCopy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()) {\n    return <div className=\"game-won\">You won!</div>;\n  }\n\n  // TODO\n\n  // make table board\n\n  // TODO\n\n  return (\n    <table className = \"board\">\n      <tbody>\n        {board.map( (row, y) => (\n          <tr>\n         {row.map((isLit,x) => (\n          <Cell\n            isLit= {isLit}\n            flipCellsAroundMe = {() => flipCellsAround(`${y}-${x}`)}\n          \n          \n          />\n         )\n\n         )}\n            \n        </tr>\n        )\n\n        )}\n        \n\n\n\n\n      </tbody>\n      \n\n\n    </table>\n  )\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}