{"ast":null,"code":"var _jsxFileName = \"/Users/leogao/Downloads/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = .3\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  // () => if num > chanceLightStartsOn isLit  is False     \n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        row.push(false);\n      }\n      initialBoard.push(row);\n    }\n    let counter = 0;\n    for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n        if (Math.random() < chanceLightStartsOn) {\n          initialBoard = flipCellsAround(`${i}-${j}`, initialBoard);\n          counter += 1;\n          console.log(counter);\n          console.log(`${i + 1}-${j + 1}`);\n        }\n      }\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => cell === false));\n  }\n  function flipCellsAround(coord, boardParam) {\n    const currentBoard = boardParam || board;\n    const [y, x] = coord.split(\"-\").map(Number);\n    const flipCell = (y, x, boardCopy) => {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        boardCopy[y][x] = !boardCopy[y][x];\n      }\n    };\n\n    // TODO: Make a (deep) copy of the oldBoard\n    let boardCopy = currentBoard.map(row => [...row]);\n\n    // TODO: in the copy, flip this cell and the cells around it\n    flipCell(y, x, boardCopy);\n    flipCell(y - 1, x, boardCopy);\n    flipCell(y + 1, x, boardCopy);\n    flipCell(y, x - 1, boardCopy);\n    flipCell(y, x + 1, boardCopy);\n    // TODO: return the copy\n    if (!boardParam) {\n      setBoard(boardCopy);\n    }\n    return boardCopy;\n  }\n  ;\n  const randomizeAgain = () => {\n    setBoard(createBoard());\n  };\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-won\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You Won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBoard(createBoard()),\n        children: \"New Game?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }, this);\n  }\n\n  // TODO\n\n  // make table board\n\n  // TODO\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((isLit, x) => /*#__PURE__*/_jsxDEV(Cell, {\n            isLit: isLit,\n            flipCellsAroundMe: () => flipCellsAround(`${y}-${x}`)\n          }, [y, x], false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }, this))\n        }, y, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => randomizeAgain(),\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","push","counter","Math","random","flipCellsAround","console","log","hasWon","every","cell","coord","boardParam","currentBoard","y","x","split","map","Number","flipCell","boardCopy","randomizeAgain","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["/Users/leogao/Downloads/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = .3}) {\n  const [board, setBoard] = useState(createBoard());\n\n  \n    // () => if num > chanceLightStartsOn isLit  is False     \n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let i = 0; i< nrows; i++){\n      let row = []\n      for(let j = 0; j<ncols; j++){\n        row.push(false)\n      }\n      initialBoard.push(row)\n    }\n    let counter = 0;\n    for(let i = 0; i< nrows; i++){\n      for(let j = 0; j<ncols; j++){\n        if (Math.random() < chanceLightStartsOn) {\n          initialBoard = flipCellsAround(`${i}-${j}`, initialBoard);\n          counter += 1\n          console.log(counter)\n          console.log(`${i+1}-${j+1}`)\n        }\n      }\n    }\n  \n    return initialBoard;\n  }\n  \n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => cell === false));\n\n  }\n\n  function flipCellsAround(coord, boardParam ) {\n      const currentBoard = boardParam || board;\n    \n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n     let boardCopy = currentBoard.map(row => [...row])\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y,x,boardCopy)\n      flipCell(y-1,x,boardCopy)\n      flipCell(y+1,x,boardCopy)\n      flipCell(y,x-1,boardCopy)\n      flipCell(y,x+1,boardCopy)\n      // TODO: return the copy\n      if (!boardParam) {\n        setBoard(boardCopy);\n      }\n      return boardCopy\n    };\n  \n  const randomizeAgain = () =>{\n    setBoard(createBoard())\n  }\n\n  \n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()) {\n    return <div className=\"game-won\">\n      <h2>You Won!</h2>\n    <button onClick= {()=>setBoard(createBoard())}>New Game?</button>\n    </div>;\n  }\n\n  // TODO\n\n  // make table board\n\n  // TODO\n\n  return (\n    <div>\n    <table className = \"board\">\n      <tbody>\n        {board.map( (row, y) => (\n          <tr key = {y}>\n         {row.map((isLit,x) => (\n          <Cell\n            key = {[y,x]}\n            isLit= {isLit}\n            flipCellsAroundMe = {() => flipCellsAround(`${y}-${x}`)}\n          \n          \n          />\n         )\n\n         )}\n            \n        </tr>\n        )\n\n        )}\n        \n      </tbody>\n    </table>\n          <button className = 'button' onClick = {() => randomizeAgain()}>Restart</button>\n    </div>\n  )\n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,SAAAC,MAAA,IAAAC,OAAA;AAyBA,SAASC,KAAKA,CAAC;EAAEC,KAAK,GAAG,CAAC;EAAEC,KAAK,GAAG,CAAC;EAAEC,mBAAmB,GAAG;AAAE,CAAC,EAAE;EAAAC,EAAA;EAChE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACW,WAAW,CAAC,CAAC,CAAC;;EAG/C;EACF;EACA,SAASA,WAAWA,CAAA,EAAG;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB;IACA,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAER,KAAK,EAAEQ,CAAC,EAAE,EAAC;MAC3B,IAAIC,GAAG,GAAG,EAAE;MACZ,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACT,KAAK,EAAES,CAAC,EAAE,EAAC;QAC1BD,GAAG,CAACE,IAAI,CAAC,KAAK,CAAC;MACjB;MACAJ,YAAY,CAACI,IAAI,CAACF,GAAG,CAAC;IACxB;IACA,IAAIG,OAAO,GAAG,CAAC;IACf,KAAI,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAER,KAAK,EAAEQ,CAAC,EAAE,EAAC;MAC3B,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACT,KAAK,EAAES,CAAC,EAAE,EAAC;QAC1B,IAAIG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGZ,mBAAmB,EAAE;UACvCK,YAAY,GAAGQ,eAAe,CAAC,GAAGP,CAAC,IAAIE,CAAC,EAAE,EAAEH,YAAY,CAAC;UACzDK,OAAO,IAAI,CAAC;UACZI,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;UACpBI,OAAO,CAACC,GAAG,CAAC,GAAGT,CAAC,GAAC,CAAC,IAAIE,CAAC,GAAC,CAAC,EAAE,CAAC;QAC9B;MACF;IACF;IAEA,OAAOH,YAAY;EACrB;EAGA,SAASW,MAAMA,CAAA,EAAG;IAChB;IACA,OAAOd,KAAK,CAACe,KAAK,CAACV,GAAG,IAAIA,GAAG,CAACU,KAAK,CAACC,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,CAAC;EAE9D;EAEA,SAASL,eAAeA,CAACM,KAAK,EAAEC,UAAU,EAAG;IACzC,MAAMC,YAAY,GAAGD,UAAU,IAAIlB,KAAK;IAExC,MAAM,CAACoB,CAAC,EAAEC,CAAC,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IAE3C,MAAMC,QAAQ,GAAGA,CAACL,CAAC,EAAEC,CAAC,EAAEK,SAAS,KAAK;MACpC;;MAEA,IAAIL,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGxB,KAAK,IAAIuB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGxB,KAAK,EAAE;QAC9C8B,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC;MACpC;IACF,CAAC;;IAED;IACD,IAAIK,SAAS,GAAGP,YAAY,CAACI,GAAG,CAAClB,GAAG,IAAI,CAAC,GAAGA,GAAG,CAAC,CAAC;;IAEhD;IACAoB,QAAQ,CAACL,CAAC,EAACC,CAAC,EAACK,SAAS,CAAC;IACvBD,QAAQ,CAACL,CAAC,GAAC,CAAC,EAACC,CAAC,EAACK,SAAS,CAAC;IACzBD,QAAQ,CAACL,CAAC,GAAC,CAAC,EAACC,CAAC,EAACK,SAAS,CAAC;IACzBD,QAAQ,CAACL,CAAC,EAACC,CAAC,GAAC,CAAC,EAACK,SAAS,CAAC;IACzBD,QAAQ,CAACL,CAAC,EAACC,CAAC,GAAC,CAAC,EAACK,SAAS,CAAC;IACzB;IACA,IAAI,CAACR,UAAU,EAAE;MACfjB,QAAQ,CAACyB,SAAS,CAAC;IACrB;IACA,OAAOA,SAAS;EAClB;EAAC;EAEH,MAAMC,cAAc,GAAGA,CAAA,KAAK;IAC1B1B,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;EACzB,CAAC;;EAID;;EAEA,IAAIY,MAAM,CAAC,CAAC,EAAE;IACZ,oBAAOpB,OAAA;MAAKkC,SAAS,EAAC,UAAU;MAAAC,QAAA,gBAC9BnC,OAAA;QAAAmC,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBvC,OAAA;QAAQwC,OAAO,EAAGA,CAAA,KAAIjC,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAE;QAAA2B,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC;EACR;;EAEA;;EAEA;;EAEA;;EAEA,oBACEvC,OAAA;IAAAmC,QAAA,gBACAnC,OAAA;MAAOkC,SAAS,EAAG,OAAO;MAAAC,QAAA,eACxBnC,OAAA;QAAAmC,QAAA,EACG7B,KAAK,CAACuB,GAAG,CAAE,CAAClB,GAAG,EAAEe,CAAC,kBACjB1B,OAAA;UAAAmC,QAAA,EACAxB,GAAG,CAACkB,GAAG,CAAC,CAACY,KAAK,EAACd,CAAC,kBAChB3B,OAAA,CAACF,IAAI;YAEH2C,KAAK,EAAGA,KAAM;YACdC,iBAAiB,EAAIA,CAAA,KAAMzB,eAAe,CAAC,GAAGS,CAAC,IAAIC,CAAC,EAAE;UAAE,GAFjD,CAACD,CAAC,EAACC,CAAC,CAAC;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKb,CAGF;QAAC,GAXWb,CAAC;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAaV,CAGJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACFvC,OAAA;MAAQkC,SAAS,EAAG,QAAQ;MAACM,OAAO,EAAIA,CAAA,KAAMP,cAAc,CAAC,CAAE;MAAAE,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjF,CAAC;AAEV;AAAClC,EAAA,CApHQJ,KAAK;AAAA0C,EAAA,GAAL1C,KAAK;AAsHd,eAAeA,KAAK;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}